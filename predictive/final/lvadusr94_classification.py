# -*- coding: utf-8 -*-
"""LVADUSR94_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aVLxcV8QJVIwAzHegCIQK7FxaOlJctQ0
"""

import pandas as pd
import numpy as np

data = pd.read_csv("/content/loan_approval.csv")
data.isnull().sum()

data.duplicated().sum()

data.head()

import matplotlib.pyplot as plt
import seaborn as sns
data.columns

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(18, 5))
plt.subplot(1, 3, 1)
sns.histplot(data=data, x=' education', kde=True)
plt.subplot(1, 3, 2)
sns.histplot(data=data, x=' cibil_score', kde=True)
plt.subplot(1, 3, 3)
sns.histplot(data=data, x=' income_annum', kde=True)

plt.tight_layout()
plt.show()

plt.figure(figsize=(10,6))
sns.heatmap(data.corr(),annot=True)

data.head()

data.columns

from sklearn.preprocessing import LabelEncoder,OneHotEncoder
Le = LabelEncoder()
# Oh = OneHotEncoder()
cat = [' education', ' self_employed',' loan_status']
data[cat] = data[cat].apply(Le.fit_transform)
data

sns.boxplot(data)

from scipy.stats import zscore

zscores = zscore(data)
abs = np.abs(zscores)
f = (abs > 3).all(axis=1)
clean = data[~f]
cl = pd.DataFrame(clean)
print(cl.shape,data.shape) # so many outliers are present in the samerange, removing might make the data skewed

X = data.iloc[:,:-1]
y = data.iloc[:,-1:]

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.ensemble import RandomForestClassifier

clf = RandomForestClassifier()
model = clf.fit(X_train,y_train)
y_pred = clf.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix,accuracy_score,f1_score

print("Classification report \n",classification_report(y_test,y_pred))
print("\nConfusion matrix \n",confusion_matrix(y_test,y_pred))
print("\nAccuracy score \n",accuracy_score(y_test,y_pred))
print("\nf1 score \n",f1_score(y_test,y_pred))