# -*- coding: utf-8 -*-
"""LVADSUSR94-lakshmi-FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SgMjjjlN7EoxFRjpRzjqOsDLsXm0kuBU
"""

import matplotlib.pyplot as plt
import seaborn as sns


class walmart():
  def __init__(self,data):
    self.data = data
  def stat(self):
    numerical_columns = self.data.select_dtypes(include=["int64", "float64"])
    mean = numerical_columns.mean()
    median = numerical_columns.median()
    mode = numerical_columns.mode().iloc[0]
    range = numerical_columns.max() - numerical_columns.min()
    variance = numerical_columns.var()
    std_dev = numerical_columns.std()
    print("Mean:\n", mean)
    print("\nMedian:\n", median)
    print("\nMode:\n", mode)
    print("\nRange:\n", range)
    print("\nVariance:\n", variance)
    print("\nStandard deviation:\n", std_dev)
  def visuals(self):
    sns.boxplot(self.data["Sales"])
    plt.title("Box plot of sales")
    plt.show()

    for col in numerical_columns:
      plt.hist(self.data[col])
      plt.title(f"Histogram for {col}")
      plt.show()


    plt.scatter(self.data["Sales"], self.data["Profit"])
    plt.title("Scatter plot of Sales vs. Profit")
    plt.show()

    plt.bar(self.data["Category"], self.data["Profit"])
    plt.title("Category vs profit")
    plt.show()
  def corelations(self):
    c = self.data.corr()
    print("Correlation matrix: ",c)
    sns.heatmap(c,cmap='jet')
  def anomaly(self):
    try:
      Q1 = self.data.quantile(0.25)
      Q3 = self.data.quantile(0.75)
      IQR = Q3-Q1
      outliers = ((self.data < (Q1 - (1.5 * IQR))) | (self.data > (Q3 + (1.5 * IQR))))


      for column in data.columns:
        outlier_rows = outliers[column]
        if outlier_rows.any():
          print(f"Outliers detected in column '{column}':")
          print(data[outlier_rows][column])
    except:
      print("anomalies not found")
  def trend(self):
    import datetime as dt
    # data['Ship Year'] = pd.DatetimeIndex(data['Ship Date']).year
    sns.lineplot(self.data,pd.DatetimeIndex(self.data['Ship Date']).year,y=self.data["Sales"])
    sns.lineplot(self.data,x=pd.DatetimeIndex(self.data['Ship Date']).year,y=self.data["Profit"])
    #plt.bar(data["Ship Year"],data['Profit'],label = "profit",marker = '^')
    plt.show()
    sns.barplot(self.data,x=self.data["Ship Year"],y=self.data["Sales"],hue=self.data["Category"])
  def customer_analysis(self):
    top_5_customers = (
    self.data.groupby('EmailID')
    .agg(total_orders=('Order ID', 'count'), total_sales=('Sales', 'sum'))
    .sort_values(by=['total_orders', 'total_sales'], ascending=False)
    .head(5))
    print(top_5_customers)
    import datetime as dt

  def avg_time_between_orders(self):
      grouped_data = self.data.groupby('EmailID')['Order Date']
      avg_time = grouped_data.apply(lambda x: round((x.max() - x.min()).days / (len(x) - 1),3) if len(x) > 1 else 0)
      print("Average time between orders: \n", avg_time)
      return avg_time
  def com_analytics(self):
    data = self.data
    sales_velocity = data["Sales"].sum() / (data["Order Date"].max() - data["Order Date"].min()).days + ((data["Order Date"].max() - data["Order Date"].min()).seconds / 86400.0)
    order_fulfillment_rate = data["Order ID"].count() / (data["Order Date"].max() - data["Order Date"].min()).days
    print("Sales velocity:", sales_velocity)
    print("Order fulfillment rate:", order_fulfillment_rate)
    if sales_velocity > 1:
        print("The sales velocity is greater than 1, which means that the company is selling more units than it is producing.")
    if order_fulfillment_rate > 0.9:
        print("The order fulfillment rate is greater than 90%, which means that the company is doing a good job of fulfilling orders on time.")
    d = data.groupby("Geography")["Sales"].sum()
    print("The data according to Geography:\n",d)
    x =data.groupby("EmailID")["Order ID"].count()
    # y =data.groupby("EmailID")["Order ID"].count().sort_values(x,ascending=False)
    y = pd.DataFrame(x)
    print("the high value customers are customers with max count : \n",y)


def main():
  data = pd.read_excel("/content/Walmart_Dataset Python_Final_Assessment.xlsx")
  data = pd.DataFrame(data)
  print(data.info())
  print("Null values: ",data.isna().sum())
  data.dropna
  print("Duplicates:" ,data.duplicated().sum())
  w = walmart(data)
  w.stat()
  w.visuals()
  w.corelations()
  w.anomaly()
  w.customer_analysis()
  w.avg_time_between_orders()
  w.com_analytics()


main()





import datetime as dt
sns.lineplot(data,x=data["Ship Year"],y=data["Sales"])
sns.lineplot(data,x=data["Ship Year"],y=data["Profit"])
#plt.bar(data["Ship Year"],data['Profit'],label = "profit",marker = '^')
plt.show()

"""it can be seen that sales and profits have positive correlation, when there are more sales profits are also high.the sales were highest in 2013 , where are profits are highest in 2014

"""

sns.barplot(data,x=data["Ship Year"],y=data["Sales"],hue=data["Category"])

top_5_customers = (
    data.groupby('EmailID')
    .agg(total_orders=('Order ID', 'count'), total_sales=('Sales', 'sum'))
    .sort_values(by=['total_orders', 'total_sales'], ascending=False)
    .head(5)
)

print(top_5_customers)

"""It can be seen that the people with more total _orders have more total _sales . The sales mostly took place during month ends. if we target more ads in month ends we can make more profits


"""

import datetime as dt

def avg_time_between_orders(data):
  grouped_data = data.groupby('EmailID')['Order Date']
  avg_time = grouped_data.apply(lambda x: round((x.max() - x.min()).days / (len(x) - 1),3) if len(x) > 1 else 0)
  return avg_time
  grouped_data.sort_values(by=['avg_time'],ascending = False)

avg_time = avg_time_between_orders(data)
print("Average time between orders: \n", avg_time)
q  = pd.DataFrame(avg_time)
from matplotlib import pyplot as plt
q['Order Date'].plot(kind='line', figsize=(8, 4), title='Order Date')
plt.gca().spines[['top', 'right']].set_visible(False)
q



sales_velocity = data["Sales"].sum() / (data["Order Date"].max() - data["Order Date"].min()).days + ((data["Order Date"].max() - data["Order Date"].min()).seconds / 86400.0)
order_fulfillment_rate = data["Order ID"].count() / (data["Order Date"].max() - data["Order Date"].min()).days
print("Sales velocity:", sales_velocity)
print("Order fulfillment rate:", order_fulfillment_rate)
if sales_velocity > 1:
     print("The sales velocity is greater than 1, which means that the company is selling more units than it is producing.")
if order_fulfillment_rate > 0.9:
     print("The order fulfillment rate is greater than 90%, which means that the company is doing a good job of fulfilling orders on time.")

d = data.groupby("Geography")["Sales"].sum()
d = pd.DataFrame(d)
from matplotlib import pyplot as plt
d['Sales'].plot(kind='line', figsize=(8, 4), title='Sales')
plt.gca().spines[['top', 'right']].set_visible(False)
d



x =data.groupby("EmailID")["Order ID"].count()
# y =data.groupby("EmailID")["Order ID"].count().sort_values(x,ascending=False)
y = pd.DataFrame(x)
from matplotlib import pyplot as plt
y['Order ID'].plot(kind='line', figsize=(8, 4), title='Order ID')
plt.gca().spines[['top', 'right']].set_visible(False)
y



from matplotlib import pyplot as plt
y['Order ID'].plot(kind='hist', bins=20, title='Order ID')
plt.gca().spines[['top', 'right',]].set_visible(False)

data.info()