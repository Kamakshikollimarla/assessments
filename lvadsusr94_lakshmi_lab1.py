# -*- coding: utf-8 -*-
"""LVADSUSR94_lakshmi_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E0xruMv7-Sz5cxk-B2oW_uOvK58ZY7v5
"""

import pandas as pd
import numpy as np
import seaborn as sns


data = pd.read_csv("/content/expenses.csv")
data = pd.DataFrame(data)
data.isna().count()

from sklearn.impute import SimpleImputer

imputer = SimpleImputer(missing_values= np.NaN ,strategy="mean")
d = np.array(data["age"])
data["age"] = imputer.fit_transform(d.reshape(-1,1))
# imp.fit_transform(x_train['Height (cm)'].values.reshape(-1,1))[:,0]
# d = imp.fit([X])
d = np.array(data["charges"])
data["charges"] = imputer.fit_transform(d.reshape(-1,1))

d = np.array(data["bmi"])
data["bmi"] = imputer.fit_transform(d.reshape(-1,1))

imputer = SimpleImputer(missing_values= np.NaN ,strategy="most_frequent")
d = np.array(data["sex"])
data["sex"] = imputer.fit_transform(d.reshape(-1,1))

d = np.array(data["smoker"])
data["smoker"] = imputer.fit_transform(d.reshape(-1,1))

d = np.array(data["region"])
data["region"] = imputer.fit_transform(d.reshape(-1,1))

imputer = SimpleImputer(missing_values= np.NaN ,strategy="constant",fill_value=0)
d = np.array(data["children"])
data["children"] = imputer.fit_transform(d.reshape(-1,1))

data.head()

from sklearn.preprocessing import LabelEncoder, OneHotEncoder

d = data
le = LabelEncoder()
d["sex"] = le.fit_transform(d["sex"])
d["smoker"] = le.fit_transform(d["smoker"])
d["region"] = le.fit_transform(d["region"])

d.head()
sns.boxplot(d)

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

d= sc.fit_transform(d)

sns.boxplot(d)

from scipy import stats

zscores = stats.zscore(d)
abs = np.abs(zscores)
f = (abs > 0.2).all(axis = 1)
filterd_d= d[f]
print(d.shape)
print(filterd_d.shape)
sns.boxplot(filterd_d)

c = pd.DataFrame(filterd_d)
print(type(c))
a = c.corr()
print(a)
sns.heatmap(a)

X = c.iloc[:,:-1]
y = c.iloc[:,-1:]

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)

from sklearn.linear_model import LinearRegression

clf = LinearRegression()
model = clf.fit(X_train,y_train)
pred = clf.predict(X_test)

from sklearn.metrics import accuracy_score,mean_squared_error,mean_absolute_error, r2_score

mse = mean_squared_error(pred,y_test)
mae = mean_absolute_error(pred,y_test)
rmse = np.sqrt(mse)
r2 = r2_score(pred,y_test)
print("mse:" , mse)
print("mae:" , mae)
print("r2:",r2)
print("rmse:",rmse)

